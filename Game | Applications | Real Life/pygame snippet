Sound and Music
The sound and music APIâ€™s are fairly simple. Let us go though the basics and we can work our way from there.
Playing a song once:
1
2

pygame.mixer.music.load('foo.mp3')
pygame.mixer.music.play(0)
Playing a song infinitely:
1
2

pygame.mixer.music.load('foo.mp3')
pygame.mixer.music.play(-1)

The number being passed in is the number of times to repeat the song. 0 will play it once.

Calling play without a number is like calling it with 0.
1

pygame.mixer.music.play() # play once

Queuing a song:
1

pygame.mixer.music.queue('next_song.mp3')

Stopping a song:
1

pygame.mixer.music.stop()

The stop function will also nullify any entries in the queue.

Shuffle and repeat:

If, for example, you wanted to play randomly from a list of 5 songs, one could create a list of the songs as a global:
1

_songs = ['song_1.mp3', 'song_2.mp3', 'song_3.mp3', 'song_4.mp3', 'song_5.mp3']

Add a flag indicating which song is currently playing:
1

_currently_playing_song = None

And write a function that chooses a different song randomly that gets called each time the SONG_END event is fired:
1
2
3
4
5
6
7
8
9
10

import random

def play_a_different_song():
    global _currently_playing_song, _songs
    next_song = random.choice(_songs)
    while next_song == _currently_playing_song:
        next_song = random.choice(_songs)
    _currently_playing_song = next_song
    pygame.mixer.music.load(next_song)
    pygame.mixer.music.play()

Or if you want them to play in the same sequence each time:
1
2
3
4
5

def play_next_song():
    global _songs
    _songs = _songs[1:] + [_songs[0]] # move current song to the back of the list
    pygame.mixer.music.load(_songs[0])
    pygame.mixer.music.play()

The music API is very centralized. However sounds require the creation of sound objects that you have to hold on to. Much like images. Sounds have a simple .play() method that will start playing the sound.
1
2

effect = pygame.mixer.Sound('beep.wav')
effect.play()

Because you can make the mistake of storing sound instances redundantly, I suggest creating a sound library much like the image library:
1
2
3
4
5
6
7
8
9

_sound_library = {}
def play_sound(path):
  global _sound_li
brary
  sound = _sound_library.get(path)
  if sound == None:
    canonicalized_path = path.replace('/', os.sep).replace('', os.sep)
    sound = pygame.mixer.Sound(canonicalized_path)
    _sound_library[path] = sound
  sound.play()

There are many more features but this is really all you need to do 95% of what most games will require of you.

Next up on this PyGame Tutorial blog, let us look at how we can implement geometric shapes into the game.
Course Curriculum
Python Programming Certification Course